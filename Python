import subprocess

# Step 1: Define paths and filenames
analysis_exe_path = "path_to_LoadRunner_Analysis_executable/AnalysisUI.exe"
result_file_path = "path_to_result_file.lrr"
output_summary_report_path = "output_summary_report.txt"
output_excel_path = "output_excel_file.xlsx"

# Step 2: Generate the summary report using LoadRunner Analysis CLI
subprocess.run([analysis_exe_path, "-Run", "AnalysisCmd", "-ResultPath", result_file_path, "-Output", output_summary_report_path])

# Step 3: Parse the generated summary report data (not shown here)

# Step 4: Write the parsed data to Excel (not shown here)

import pandas as pd

# Step 3: Parse the generated summary report data
def parse_summary_report(summary_report_path):
    parsed_data = {}
    with open(summary_report_path, "r") as file:
        for line in file:
            # Example parsing logic:
            # Assuming each line contains key-value pairs separated by ':'
            parts = line.strip().split(':')
            if len(parts) == 2:
                key = parts[0].strip()
                value = parts[1].strip()
                parsed_data[key] = value
    return parsed_data

# Call the function to parse the summary report
summary_report_data = parse_summary_report(output_summary_report_path)

# Step 4: Write the parsed data to Excel
df = pd.DataFrame(summary_report_data.items(), columns=['Key', 'Value'])
df.to_excel(output_excel_path, index=False)

print("Parsed data written to Excel successfully.")


___________
import pyautogui
import time

# Function to automate the process of opening LoadRunner Analysis and copying summary report to Excel
def automate_loadrunner_analysis(file_name, excel_file):
    # Open LoadRunner Analysis
    pyautogui.press('win')
    pyautogui.write('LoadRunner Analysis')
    pyautogui.press('enter')
    time.sleep(10)  # Adjust this time according to your system's speed

    # Assuming the file menu is at the top-left corner
    pyautogui.click(x=100, y=100)
    time.sleep(2)

    # Open the result file
    pyautogui.moveTo(x=200, y=200)  # Adjust coordinates if needed
    pyautogui.click()

    # Enter the file name and press enter (assuming the dialog is already open)
    pyautogui.write(file_name)
    pyautogui.press('enter')
    time.sleep(10)  # Adjust this time according to your system's speed

    # Select the summary report tab (assuming it's always at a specific location)
    pyautogui.moveTo(x=500, y=300)  # Adjust coordinates if needed
    pyautogui.click()

    # Select all (Ctrl + A) and copy (Ctrl + C) the summary report content
    pyautogui.hotkey('ctrl', 'a')  # Select all
    pyautogui.hotkey('ctrl', 'c')  # Copy

    # Switch to Excel (assuming it's already open)
    pyautogui.press('win')
    pyautogui.write('Excel')
    pyautogui.press('enter')
    time.sleep(5)  # Adjust this time according to your system's speed

    # Paste (Ctrl + V) the copied content into Excel
    pyautogui.hotkey('ctrl', 'v')  # Paste

    # Save Excel file
    pyautogui.hotkey('ctrl', 's')  # Save
    pyautogui.write(excel_file)
    pyautogui.press('enter')
    time.sleep(5)  # Adjust this time according to your system's speed

# Main script
if __name__ == "__main__":
    result_file_name = "res20548"  # Adjust the file name as needed
    excel_file_name = "summary_report.xlsx"  # Adjust the Excel file name as needed

    automate_loadrunner_analysis(result_file_name, excel_file_name)

_______%____________
import subprocess

# Step 1: Define paths and filenames
analysis_exe_path = "path_to_LoadRunner_Analysis_executable/AnalysisUI.exe"
result_file_path = "path_to_result_file.lrr"
output_summary_report_path = "output_summary_report.txt"

# Step 2: Generate the summary report using LoadRunner Analysis CLI
subprocess.run([analysis_exe_path, "-Run", "AnalysisCmd", "-ResultPath", result_file_path, "-Output", output_summary_report_path])

# Step 3: Parse the generated summary report data and write it to a text file
def extract_summary_report_data(file_path):
    summary_report_data = []
    with open(file_path, "r") as file:
        lines = file.readlines()
        for line in lines:
            # Assuming summary report data starts with 'T' and ends with a numeric value
            if line.strip().startswith('T') and line.strip()[-1].isdigit():
                summary_report_data.append(line.strip())
    return summary_report_data

# Extract summary report data
summary_report_data = extract_summary_report_data(output_summary_report_path)

# Write summary report data to text file
with open("summary_report_data.txt", "w") as output_file:
    output_file.write("\n".join(summary_report_data))

print("Summary report data copied to text file successfully.")

